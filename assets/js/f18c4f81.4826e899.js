"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4697],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return p}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),u=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},l=function(e){var r=u(e.components);return n.createElement(c.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,f=d["".concat(c,".").concat(p)]||d[p]||m[p]||i;return t?n.createElement(f,o(o({ref:r},l),{},{components:t})):n.createElement(f,o({ref:r},l))}));function p(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9114:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var n=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],s={},c=void 0,u={unversionedId:"overview-of-charting/06-12 ChartSortSeriesByNamemd",id:"overview-of-charting/06-12 ChartSortSeriesByNamemd",title:"06-12 ChartSortSeriesByNamemd",description:"Chart_SortSeriesByName.md",source:"@site/docs/06-overview-of-charting/06-12 ChartSortSeriesByNamemd.md",sourceDirName:"06-overview-of-charting",slug:"/overview-of-charting/06-12 ChartSortSeriesByNamemd",permalink:"/docs/overview-of-charting/06-12 ChartSortSeriesByNamemd",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/06-overview-of-charting/06-12 ChartSortSeriesByNamemd.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"06-11 ChartGoToXRangemd",permalink:"/docs/overview-of-charting/06-11 ChartGoToXRangemd"},next:{title:"06-13 ChartFlipXYValuesmd",permalink:"/docs/overview-of-charting/06-13 ChartFlipXYValuesmd"}},l=[{value:"Chart_SortSeriesByName.md",id:"chart_sortseriesbynamemd",children:[],level:2}],m={toc:l};function d(e){var r=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"chart_sortseriesbynamemd"},"Chart_SortSeriesByName.md"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},"Public Sub Chart_SortSeriesByName()\n    'this will sort series by names\n    Dim targetObject As ChartObject\n    For Each targetObject In Chart_GetObjectsFromObject(Selection)\n\n        'uses a simple bubble sort but it works... shouldn't have 1000 series anyways\n        Dim firstChartIndex As Long\n        Dim secondChartIndex As Long\n        For firstChartIndex = 1 To targetObject.Chart.SeriesCollection.Count\n            For secondChartIndex = (firstChartIndex + 1) To targetObject.Chart.SeriesCollection.Count\n\n                Dim butlSeries1 As New bUTLChartSeries\n                Dim butlSeries2 As New bUTLChartSeries\n\n                butlSeries1.UpdateFromChartSeries targetObject.Chart.SeriesCollection(firstChartIndex)\n                butlSeries2.UpdateFromChartSeries targetObject.Chart.SeriesCollection(secondChartIndex)\n\n                If butlSeries1.name.Value > butlSeries2.name.Value Then\n                    Dim indexSeriesSwap As Long\n                    indexSeriesSwap = butlSeries2.SeriesNumber\n                    butlSeries2.SeriesNumber = butlSeries1.SeriesNumber\n                    butlSeries1.SeriesNumber = indexSeriesSwap\n                    butlSeries2.UpdateSeriesWithNewValues\n                    butlSeries1.UpdateSeriesWithNewValues\n                End If\n\n            Next secondChartIndex\n        Next firstChartIndex\n    Next targetObject\nEnd Sub\n")))}d.isMDXComponent=!0}}]);