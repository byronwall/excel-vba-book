"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6650],{3905:function(e,t,r){r.d(t,{Zo:function(){return g},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},g=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(h,o(o({ref:t},g),{},{components:r})):n.createElement(h,o({ref:t},g))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4664:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return g},default:function(){return u}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],l={},s=void 0,c={unversionedId:"overview-of-charting/06-04 specific-charting-examples",id:"overview-of-charting/06-04 specific-charting-examples",title:"06-04 specific-charting-examples",description:"specific charting examples",source:"@site/docs/06-overview-of-charting/06-04 specific-charting-examples.md",sourceDirName:"06-overview-of-charting",slug:"/overview-of-charting/06-04 specific-charting-examples",permalink:"/excel-vba-book/docs/overview-of-charting/06-04 specific-charting-examples",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/06-overview-of-charting/06-04 specific-charting-examples.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"06-03 creating-charts-from-scratch",permalink:"/excel-vba-book/docs/overview-of-charting/06-03 creating-charts-from-scratch"},next:{title:"06-05 ChartAddTitlesmd",permalink:"/excel-vba-book/docs/overview-of-charting/06-05 ChartAddTitlesmd"}},g=[{value:"specific charting examples",id:"specific-charting-examples",children:[{value:"creating an XY scatter matrix",id:"creating-an-xy-scatter-matrix",children:[{value:"ChartCreateXYGrid.md",id:"chartcreatexygridmd",children:[],level:4}],level:3},{value:"creating a panel of time series plots",id:"creating-a-panel-of-time-series-plots",children:[{value:"Chart_TimeSeries.md",id:"chart_timeseriesmd",children:[],level:4}],level:3},{value:"applying common formatting to all Charts",id:"applying-common-formatting-to-all-charts",children:[{value:"ChartDefaultFormat.md",id:"chartdefaultformatmd",children:[],level:4}],level:3}],level:2}],d={toc:g};function u(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"specific-charting-examples"},"specific charting examples"),(0,i.kt)("p",null,"This section will focus on some specific applications of applying VBA to charts. The code here can be quickly reused for your own application. These examples include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creating a grid of XY scatter plots (a scatter matrix) based on a block of data"),(0,i.kt)("li",{parentName:"ul"},"Creating a panel of time series, one chart per each value with a common x-axis")),(0,i.kt)("p",null,"TODO: identify the examples to include here"),(0,i.kt)("h3",{id:"creating-an-xy-scatter-matrix"},"creating an XY scatter matrix"),(0,i.kt)("h4",{id:"chartcreatexygridmd"},"ChartCreateXYGrid.md"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},'Public Sub ChartCreateXYGrid()\n\n    On Error GoTo ChartCreateXYGrid_Error\n\n    DeleteAllCharts\n    \'VBA doesn\'t allow a constant to be defined using a function (rgb) so we use a local variable rather than\n    \'muddying it up with the calculated value of the rgb function\n    Dim majorGridlineColor As Long\n    majorGridlineColor = RGB(200, 200, 200)\n    Dim minorGridlineColor As Long\n    minorGridlineColor = RGB(220, 220, 220)\n\n    Const CHART_HEIGHT As Long = 300\n    Const CHART_WIDTH As Long = 400\n    Const MARKER_SIZE As Long = 3\n    \'dataRange will contain the block of data with titles included\n    Dim dataRange As Range\n    Set dataRange = Application.InputBox("Select data with titles", Type:=8)\n\n    Application.ScreenUpdating = False\n\n    Dim rowIndex As Long, columnIndex As Long\n    rowIndex = 0\n\n    Dim xAxisDataRange As Range, yAxisDataRange As Range\n    For Each yAxisDataRange In dataRange.Columns\n        columnIndex = 0\n\n        For Each xAxisDataRange In dataRange.Columns\n            If rowIndex <> columnIndex Then\n                Dim targetChart As Chart\n                Set targetChart = ActiveSheet.ChartObjects.Add(columnIndex * CHART_WIDTH, _\n                                                               rowIndex * CHART_HEIGHT + 100, _\n                                                               CHART_WIDTH, CHART_HEIGHT).Chart\n\n                Dim targetSeries As series\n                Dim butlSeries As New bUTLChartSeries\n\n                \'offset allows for the title to be excluded\n                Set butlSeries.XValues = Intersect(xAxisDataRange, xAxisDataRange.Offset(1))\n                Set butlSeries.Values = Intersect(yAxisDataRange, yAxisDataRange.Offset(1))\n                Set butlSeries.name = yAxisDataRange.Cells(1)\n                butlSeries.ChartType = xlXYScatter\n\n                Set targetSeries = butlSeries.AddSeriesToChart(targetChart)\n\n                targetSeries.MarkerSize = MARKER_SIZE\n                targetSeries.MarkerStyle = xlMarkerStyleCircle\n\n                Dim targetAxis As Axis\n                Set targetAxis = targetChart.Axes(xlCategory)\n                targetAxis.HasTitle = True\n                targetAxis.AxisTitle.Text = xAxisDataRange.Cells(1)\n                targetAxis.MajorGridlines.Border.Color = majorGridlineColor\n                targetAxis.MinorGridlines.Border.Color = minorGridlineColor\n\n                Set targetAxis = targetChart.Axes(xlValue)\n                targetAxis.HasTitle = True\n                targetAxis.AxisTitle.Text = yAxisDataRange.Cells(1)\n                targetAxis.MajorGridlines.Border.Color = majorGridlineColor\n                targetAxis.MinorGridlines.Border.Color = minorGridlineColor\n\n                targetChart.HasTitle = True\n                targetChart.ChartTitle.Text = yAxisDataRange.Cells(1) & " vs. " & xAxisDataRange.Cells(1)\n                \'targetChart.ChartTitle.Characters.Font.Size = 8\n                targetChart.Legend.Delete\n            End If\n\n            columnIndex = columnIndex + 1\n        Next xAxisDataRange\n\n        rowIndex = rowIndex + 1\n    Next yAxisDataRange\n\n    Application.ScreenUpdating = True\n\n    dataRange.Cells(1, 1).Activate\n\n    On Error GoTo 0\n    Exit Sub\n\nChartCreateXYGrid_Error:\n\n    MsgBox "Error " & Err.Number & " (" & Err.Description & _\n           ") in procedure ChartCreateXYGrid of Module Chart_Format"\n    MsgBox "This is most likely due to Range issues"\n\nEnd Sub\n')),(0,i.kt)("h3",{id:"creating-a-panel-of-time-series-plots"},"creating a panel of time series plots"),(0,i.kt)("h4",{id:"chart_timeseriesmd"},"Chart_TimeSeries.md"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},"Public Sub Chart_TimeSeries(ByVal rangeOfDates As Range, ByVal dataRange As Range, ByVal rangeOfTitles As Range)\n\n    Application.ScreenUpdating = False\n    Const MARKER_SIZE As Long = 3\n    Dim majorGridlineColor As Long\n    majorGridlineColor = RGB(200, 200, 200)\n    Dim chartIndex As Long\n    chartIndex = 1\n\n    Dim titleRange As Range\n    Dim targetColumn As Range\n\n    For Each titleRange In rangeOfTitles\n\n        Dim targetObject As ChartObject\n        Set targetObject = ActiveSheet.ChartObjects.Add(chartIndex * 300, 0, 300, 300)\n\n        Dim targetChart As Chart\n        Set targetChart = targetObject.Chart\n        targetChart.ChartType = xlXYScatterLines\n        targetChart.HasTitle = True\n        targetChart.Legend.Delete\n\n        Dim targetAxis As Axis\n        Set targetAxis = targetChart.Axes(xlValue)\n        targetAxis.MajorGridlines.Border.Color = majorGridlineColor\n\n        Dim targetSeries As series\n        Dim butlSeries As New bUTLChartSeries\n\n        Set butlSeries.XValues = rangeOfDates\n        Set butlSeries.Values = dataRange.Columns(chartIndex)\n        Set butlSeries.name = titleRange\n\n        Set targetSeries = butlSeries.AddSeriesToChart(targetChart)\n\n        targetSeries.MarkerSize = MARKER_SIZE\n        targetSeries.MarkerStyle = xlMarkerStyleCircle\n\n        chartIndex = chartIndex + 1\n\n    Next titleRange\n\n    Application.ScreenUpdating = True\nEnd Sub\n")),(0,i.kt)("h3",{id:"applying-common-formatting-to-all-charts"},"applying common formatting to all Charts"),(0,i.kt)("h4",{id:"chartdefaultformatmd"},"ChartDefaultFormat.md"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vb"},"Public Sub ChartDefaultFormat()\n\n    Const MARKER_SIZE As Long = 3\n    Dim majorGridlineColor As Long\n    majorGridlineColor = RGB(242, 242, 242)\n    Const TITLE_FONT_SIZE As Long = 12\n    Const SERIES_LINE_WEIGHT As Single = 1.5\n\n    Dim targetObject As ChartObject\n\n    For Each targetObject In Chart_GetObjectsFromObject(Selection)\n        Dim targetChart As Chart\n\n        Set targetChart = targetObject.Chart\n\n        Dim targetSeries As series\n        For Each targetSeries In targetChart.SeriesCollection\n\n            targetSeries.MarkerSize = MARKER_SIZE\n            targetSeries.MarkerStyle = xlMarkerStyleCircle\n\n            If targetSeries.ChartType = xlXYScatterLines Then targetSeries.Format.Line.Weight = SERIES_LINE_WEIGHT\n\n            targetSeries.MarkerForegroundColorIndex = xlColorIndexNone\n            targetSeries.MarkerBackgroundColorIndex = xlColorIndexAutomatic\n\n        Next targetSeries\n\n\n        targetChart.HasLegend = True\n        targetChart.Legend.Position = xlLegendPositionBottom\n\n        Dim targetAxis As Axis\n        Set targetAxis = targetChart.Axes(xlValue)\n\n        targetAxis.MajorGridlines.Border.Color = majorGridlineColor\n        targetAxis.Crosses = xlAxisCrossesMinimum\n\n        Set targetAxis = targetChart.Axes(xlCategory)\n\n        targetAxis.HasMajorGridlines = True\n\n        targetAxis.MajorGridlines.Border.Color = majorGridlineColor\n\n        If targetChart.HasTitle Then\n            targetChart.ChartTitle.Characters.Font.Size = TITLE_FONT_SIZE\n            targetChart.ChartTitle.Characters.Font.Bold = True\n        End If\n\n        Set targetAxis = targetChart.Axes(xlCategory)\n\n    Next targetObject\n\nEnd Sub\n")))}u.isMDXComponent=!0}}]);