"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3858],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,p=d["".concat(l,".").concat(h)]||d[h]||m[h]||a;return n?o.createElement(p,s(s({ref:t},u),{},{components:n})):o.createElement(p,s({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2710:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),s=["components"],i={},l=void 0,c={unversionedId:"overview-of-utility-code/15-02 CombineAllSheetsDatamd",id:"overview-of-utility-code/15-02 CombineAllSheetsDatamd",title:"15-02 CombineAllSheetsDatamd",description:"CombineAllSheetsData.md",source:"@site/docs/15-overview-of-utility-code/15-02 CombineAllSheetsDatamd.md",sourceDirName:"15-overview-of-utility-code",slug:"/overview-of-utility-code/15-02 CombineAllSheetsDatamd",permalink:"/docs/overview-of-utility-code/15-02 CombineAllSheetsDatamd",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/15-overview-of-utility-code/15-02 CombineAllSheetsDatamd.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"15-01 ColorInputsmd",permalink:"/docs/overview-of-utility-code/15-01 ColorInputsmd"},next:{title:"15-03 ConvertSelectionToCsvmd",permalink:"/docs/overview-of-utility-code/15-03 ConvertSelectionToCsvmd"}},u=[{value:"CombineAllSheetsData.md",id:"combineallsheetsdatamd",children:[],level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"combineallsheetsdatamd"},"CombineAllSheetsData.md"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},"Public Sub CombineAllSheetsData()\n\n    'create the new wktk and sheet\n    Dim targetWorkbook As Workbook\n    Dim sourceWorkbook As Workbook\n\n    Set sourceWorkbook = ActiveWorkbook\n    Set targetWorkbook = Workbooks.Add\n\n    Dim targetWorksheet As Worksheet\n    Set targetWorksheet = targetWorkbook.Sheets.Add\n\n    Dim isFirst As Boolean\n    isFirst = True\n\n    Dim targetRow As Long\n    targetRow = 1\n\n    Dim sourceWorksheet As Worksheet\n    For Each sourceWorksheet In sourceWorkbook.Sheets\n        If sourceWorksheet.name <> targetWorksheet.name Then\n\n            sourceWorksheet.Unprotect\n\n            'get the headers squared up\n            If isFirst Then\n                'copy over all headers\n                sourceWorksheet.Rows(1).Copy targetWorksheet.Range(\"A1\")\n                isFirst = False\n\n            Else\n                'search for missing columns\n                Dim headerRow As Range\n                For Each headerRow In Intersect(sourceWorksheet.Rows(1), sourceWorksheet.UsedRange)\n\n                    'check if it exists\n                    Dim matchingHeader As Variant\n                    matchingHeader = Application.Match(headerRow, targetWorksheet.Rows(1), 0)\n\n                    'if not, add to header row\n                    If IsError(matchingHeader) Then targetWorksheet.Range(\"A1\").End(xlToRight).Offset(, 1) = headerRow\n                Next headerRow\n            End If\n\n            'find the PnPID column for combo\n            Dim pIDColumn As Long\n            pIDColumn = Application.Match(\"PnPID\", targetWorksheet.Rows(1), 0)\n\n            'find the PnPID column for data\n            Dim pIDData As Long\n            pIDData = Application.Match(\"PnPID\", sourceWorksheet.Rows(1), 0)\n\n            'add the data, row by row\n            Dim targetCell As Range\n            For Each targetCell In sourceWorksheet.UsedRange.SpecialCells(xlCellTypeConstants)\n                If targetCell.Row > 1 Then\n\n                    'check if the PnPID exists in the combo sheet\n                    Dim sourceRow As Variant\n                    sourceRow = Application.Match( _\n                               sourceWorksheet.Cells(targetCell.Row, pIDData), _\n                               targetWorksheet.Columns(pIDColumn), _\n                               0)\n\n                    'add new row if it did not exist and id number\n                    If IsError(sourceRow) Then\n                        sourceRow = targetWorksheet.Columns(pIDColumn).Cells(targetWorksheet.Rows.Count, 1).End(xlUp).Offset(1).Row\n                        targetWorksheet.Cells(sourceRow, pIDColumn) = sourceWorksheet.Cells(targetCell.Row, pIDData)\n                    End If\n\n                    'get column\n                    Dim columnNumber As Long\n                    columnNumber = Application.Match(sourceWorksheet.Cells(1, targetCell.Column), targetWorksheet.Rows(1), 0)\n\n                    'update combo data\n                    targetWorksheet.Cells(sourceRow, columnNumber) = targetCell\n\n                End If\n            Next targetCell\n        End If\n    Next sourceWorksheet\nEnd Sub\n")))}d.isMDXComponent=!0}}]);