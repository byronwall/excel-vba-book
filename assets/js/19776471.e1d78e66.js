"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5528],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(f,u(u({ref:t},s),{},{components:n})):o.createElement(f,u({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,u=new Array(a);u[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,u[1]=l;for(var c=2;c<a;c++)u[c]=n[c];return o.createElement.apply(null,u)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1886:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),u=["components"],l={},i=void 0,c={unversionedId:"overview-of-utility-code/15-05 CutPasteTransposemd",id:"overview-of-utility-code/15-05 CutPasteTransposemd",title:"15-05 CutPasteTransposemd",description:"CutPasteTranspose.md",source:"@site/docs/15-overview-of-utility-code/15-05 CutPasteTransposemd.md",sourceDirName:"15-overview-of-utility-code",slug:"/overview-of-utility-code/15-05 CutPasteTransposemd",permalink:"/docs/overview-of-utility-code/15-05 CutPasteTransposemd",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/15-overview-of-utility-code/15-05 CutPasteTransposemd.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"15-04 CopyCellAddressmd",permalink:"/docs/overview-of-utility-code/15-04 CopyCellAddressmd"},next:{title:"15-06 FillValueDownmd",permalink:"/docs/overview-of-utility-code/15-06 FillValueDownmd"}},s=[{value:"CutPasteTranspose.md",id:"cutpastetransposemd",children:[],level:2}],p={toc:s};function d(e){var t=e.components,n=(0,r.Z)(e,u);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"cutpastetransposemd"},"CutPasteTranspose.md"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},"Public Sub CutPasteTranspose()\n\n\n    '########Still Needs to address Issue#23#############\n    On Error GoTo errHandler\n    Dim sourceRange As Range\n    'TODO #Should use new inputbox function\n    Set sourceRange = Selection\n\n    Dim outputRange As Range\n    Set outputRange = Application.InputBox(\"Select output corner\", Type:=8)\n\n    Application.ScreenUpdating = False\n    Application.EnableEvents = False\n    Application.Calculation = xlCalculationManual\n\n    Dim topLeftCell As Range\n    Set topLeftCell = sourceRange.Cells(1, 1)\n\n    Dim topRow As Long\n    topRow = topLeftCell.Row\n    Dim leftColumn As Long\n    leftColumn = topLeftCell.Column\n\n    Dim outputRow As Long\n    Dim outputColumn As Long\n    outputRow = outputRange.Row\n    outputColumn = outputRange.Column\n\n    outputRange.Activate\n\n    'Check to not overwrite\n    Dim targetCell As Range\n    For Each targetCell In sourceRange\n        If Not Intersect(sourceRange, Cells(outputRow + targetCell.Column - leftColumn, outputColumn + targetCell.Row - topRow)) Is Nothing Then\n            MsgBox (\"Your destination intersects with your data. Exiting.\")\n            GoTo errHandler\n        End If\n    Next\n\n    'this can be better\n    For Each targetCell In sourceRange\n        targetCell.Cut\n        ActiveSheet.Cells(outputRow + targetCell.Column - leftColumn, outputColumn + targetCell.Row - topRow).Activate\n        ActiveSheet.Paste\n    Next targetCell\n\nerrHandler:\n    Application.CutCopyMode = False\n    Application.ScreenUpdating = True\n    Application.EnableEvents = True\n    Application.Calculation = xlCalculationAutomatic\n    Application.Calculate\n\nEnd Sub\n")))}d.isMDXComponent=!0}}]);