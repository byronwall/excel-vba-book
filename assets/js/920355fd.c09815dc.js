"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2040],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),h=l(n),d=o,g=h["".concat(c,".").concat(d)]||h[d]||p[d]||a;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6389:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return h}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],u={},c=void 0,l={unversionedId:"overview-of-UDFs/13-07 debugging-UDFs",id:"overview-of-UDFs/13-07 debugging-UDFs",title:"13-07 debugging-UDFs",description:"debugging UDFs",source:"@site/docs/13-overview-of-UDFs/13-07 debugging-UDFs.md",sourceDirName:"13-overview-of-UDFs",slug:"/overview-of-UDFs/13-07 debugging-UDFs",permalink:"/docs/overview-of-UDFs/13-07 debugging-UDFs",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/13-overview-of-UDFs/13-07 debugging-UDFs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"13-06 complicated-UDFS",permalink:"/docs/overview-of-UDFs/13-06 complicated-UDFS"},next:{title:"13-08 ConcatArrmd",permalink:"/docs/overview-of-UDFs/13-08 ConcatArrmd"}},s=[{value:"debugging UDFs",id:"debugging-udfs",children:[],level:2}],p={toc:s};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"debugging-udfs"},"debugging UDFs"),(0,a.kt)("p",null,"Debugging a UDF is really the same as debugging normal code except you need to understand when your code will be called and hence, what you may be debugging. The simplest way to think about debugging a UDF is with an empty spreadsheet. In this example, once you type your UDF into the spreadsheet, Excel will execute the code and you can debug it via a breakpoint. This is simple."),(0,a.kt)("p",null,"For a larger spreadsheet however, you are very likely to use your UDF more than once while only having a problem with a specific instance of it. Let's say your UDF does some fancy statistics btu cannot handle certain types of inputs. You can see that your code is throwing an error with a ",(0,a.kt)("inlineCode",{parentName:"p"},"#VALUE!")," output. If you add a breakpoint to the UDF, then you risk having to debug a large number of successful calls before your bad one happens."),(0,a.kt)("p",null,"There are a couple of approaches to deal with this:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'Edit a formula for the cell you want with a breakpoint set in the debugger. Excel will execute that "new" formula first which will be the one of interest.'),(0,a.kt)("li",{parentName:"ul"},"Right a quick If statement to check if the the Caller's address is a specific cell.")),(0,a.kt)("p",null,"The first example is easy enough to understand and si the typical approach for debugging a UDF. It's a bit of a pain because your breakpoint will stay in place and may be hit several times later. To get around this, you can switch over to manual calculation to avoid all the other cells calculating. TODO: is that right?"),(0,a.kt)("p",null,"The second approach works well when you have a UDF in several place but where only one of them is causing an error. You can add a temporary statement at the top to check for the Caller address and then set a breakpoint inside there. once it's hit, you know you are debugging the right call and can then step through the code. You can do the same approach to check for the incoming value or really anything else that is unique to the problematic cell. The nice thing ehre is that if you can figure out what statement to use for the breakpoint, you will have n aidea of which conditions may cause the problem."),(0,a.kt)("p",null,"TODO: how are runtime errors handled here? any way to get them thrown with a prompt."))}h.isMDXComponent=!0}}]);