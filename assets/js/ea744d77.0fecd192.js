"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[92],{3905:function(e,n,r){r.d(n,{Zo:function(){return m},kt:function(){return d}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},m=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=o,f=p["".concat(c,".").concat(d)]||p[d]||s[d]||a;return r?t.createElement(f,i(i({ref:n},m),{},{components:r})):t.createElement(f,i({ref:n},m))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7138:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return m},default:function(){return p}});var t=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={},c=void 0,u={unversionedId:"overview-of-values-and-formulas/05-14 TrimSelectionmd",id:"overview-of-values-and-formulas/05-14 TrimSelectionmd",title:"05-14 TrimSelectionmd",description:"TrimSelection.md",source:"@site/docs/05-overview-of-values-and-formulas/05-14 TrimSelectionmd.md",sourceDirName:"05-overview-of-values-and-formulas",slug:"/overview-of-values-and-formulas/05-14 TrimSelectionmd",permalink:"/docs/overview-of-values-and-formulas/05-14 TrimSelectionmd",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05-overview-of-values-and-formulas/05-14 TrimSelectionmd.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"05-13 SplitIntoRowsmd",permalink:"/docs/overview-of-values-and-formulas/05-13 SplitIntoRowsmd"},next:{title:"05-15 SelectedToValuemd",permalink:"/docs/overview-of-values-and-formulas/05-15 SelectedToValuemd"}},m=[{value:"TrimSelection.md",id:"trimselectionmd",children:[],level:2}],s={toc:m};function p(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"trimselectionmd"},"TrimSelection.md"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},"Public Sub TrimSelection()\n\n    Dim rangeToTrim As Range\n    On Error GoTo errHandler\n    Set rangeToTrim = GetInputOrSelection(\"Select the formulas you'd like to convert to static values\")\n\n    'disable calcs to speed up\n    Application.ScreenUpdating = False\n    Application.EnableEvents = False\n    Application.Calculation = xlCalculationManual\n\n    'force to only consider used range\n    Set rangeToTrim = Intersect(rangeToTrim, rangeToTrim.Parent.UsedRange)\n\n    Dim targetCell As Range\n    For Each targetCell In rangeToTrim\n\n        'only change if needed\n        Dim temporaryTrimHolder As Variant\n        temporaryTrimHolder = Trim(targetCell.Value)\n\n        'added support for char 160\n        'TODO add more characters to remove\n        temporaryTrimHolder = Replace(temporaryTrimHolder, chr(160), vbNullString)\n\n        If temporaryTrimHolder <> targetCell.Value Then targetCell.Value = temporaryTrimHolder\n\n    Next targetCell\n\n    Application.Calculation = xlCalculationAutomatic\n    Application.EnableEvents = True\n    Application.ScreenUpdating = True\n\n    Exit Sub\nerrHandler:\n    MsgBox \"No Delimiter Defined!\"\n    Application.ScreenUpdating = False\n    Application.EnableEvents = False\n    Application.Calculation = xlCalculationManual\nEnd Sub\n")))}p.isMDXComponent=!0}}]);