"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4908],{3905:function(e,t,o){o.d(t,{Zo:function(){return h},kt:function(){return d}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},h=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=u(o),d=r,m=p["".concat(s,".").concat(d)]||p[d]||c[d]||a;return o?n.createElement(m,i(i({ref:t},h),{},{components:o})):n.createElement(m,i({ref:t},h))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<a;u++)i[u]=o[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},9502:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return h},default:function(){return p}});var n=o(7462),r=o(3366),a=(o(7294),o(3905)),i=["components"],l={},s=void 0,u={unversionedId:"overview-of-basics-of-VBA/03-12 other-control-structures",id:"overview-of-basics-of-VBA/03-12 other-control-structures",title:"03-12 other-control-structures",description:"other control structures",source:"@site/docs/03-overview-of-basics-of-VBA/03-12 other-control-structures.md",sourceDirName:"03-overview-of-basics-of-VBA",slug:"/overview-of-basics-of-VBA/03-12 other-control-structures",permalink:"/docs/overview-of-basics-of-VBA/03-12 other-control-structures",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-overview-of-basics-of-VBA/03-12 other-control-structures.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"03-11 loop-structures",permalink:"/docs/overview-of-basics-of-VBA/03-11 loop-structures"},next:{title:"03-13 where-Excel-and-VBA-meet",permalink:"/docs/overview-of-basics-of-VBA/03-13 where-Excel-and-VBA-meet"}},h=[{value:"other control structures",id:"other-control-structures",children:[{value:"With command",id:"with-command",children:[],level:3},{value:"GoTo statements",id:"goto-statements",children:[],level:3},{value:"Error Handling",id:"error-handling",children:[{value:"avoiding errors",id:"avoiding-errors",children:[],level:4},{value:"Application.XXX functions",id:"applicationxxx-functions",children:[],level:4},{value:"common VBA errors",id:"common-vba-errors",children:[],level:4},{value:"common Excel errors",id:"common-excel-errors",children:[],level:4}],level:3}],level:2}],c={toc:h};function p(e){var t=e.components,o=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"other-control-structures"},"other control structures"),(0,a.kt)("h3",{id:"with-command"},"With command"),(0,a.kt)("p",null,"THe ",(0,a.kt)("inlineCode",{parentName:"p"},"With"),' command allows you to place a given variable within "scope" and avoid repeatedly typing that variable\'s name for each required call. The ',(0,a.kt)("inlineCode",{parentName:"p"},"With")," command exists solely to reduce the number of times that a given object or variable name is typed. You are never required to ues a With command to accomplish a goal, but it can be helpful to clarify or avoid having too long of a code block. Having said that, a With block can be incredibly confusing to read especially when mixed with the always in scope function calls like ",(0,a.kt)("inlineCode",{parentName:"p"},"Range")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Cells"),". It is incredibly easy to avoid typing the required ",(0,a.kt)("inlineCode",{parentName:"p"},".")," to start a new line and accidentally refer to the globally scope object instead of your With scoped object. For this reason, I very rarely use the With command. When I do use it, I will typically only use it when I am working with a nested object that might be several levels deep. Having said that, I mostly avoid the With block by creating a variable which holds the object in question and using that instead. I have found that parsing a With block later can quickly become a confusing mess because of the difficulty of spotting the ",(0,a.kt)("inlineCode",{parentName:"p"},".")," which is critical."),(0,a.kt)("p",null,'If you read through some of the most common questions on the internet about "why my VBA no work?" you will quickly find issues with With blocks accidentally calling a globally scoped command. I have never asked those questions on the internet, but I have definitely been bitten by the same errors where a ',(0,a.kt)("inlineCode",{parentName:"p"},".")," is missed and the commang goes bonkers. It happens but is easily avoided by not using ",(0,a.kt)("inlineCode",{parentName:"p"},"With"),"."),(0,a.kt)("h3",{id:"goto-statements"},"GoTo statements"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GoTo")," statements are used to force execution to jump to a specific Label regardless of anything else that the program is doing. A ",(0,a.kt)("inlineCode",{parentName:"p"},"GoTo")," statement is required for error handling but is otherwise frowned upon by programmers with experience in other languages. The problem is that a bad ",(0,a.kt)("inlineCode",{parentName:"p"},"GoTo")," statement allows you to do much damage within a program because you can quickly corrupt your program state by jumping around. Also, other programming languages tend to include all of the nice features that have replaced places where ",(0,a.kt)("inlineCode",{parentName:"p"},"GoTo")," was previously required. A good example of this is breaking out of a loop or skipping to the next item in a loop. The latter is typically handled with a ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statement in other languages. In VBA, this statement does not exist and you are required to use a ",(0,a.kt)("inlineCode",{parentName:"p"},"GoTo")," if you want the functionality."),(0,a.kt)("p",null,"To make a GoTo statement work, you need to have a Label that the GoTo points to. An example looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},"Sub GoToExample()\n    'doing some stuff\n\n    If someConditiojn Then\n        GoTo EndOfCode\n    Else\n        ' do some other stuff\n    End if\n\nEndOfCode:\n\nEnd Sub\n")),(0,a.kt)("p",null,"The rule for labels is that they are required to occur at the front of the lien (no indenting), they must be a single variable name without spaces, and they must end with a colon."),(0,a.kt)("p",null,"You should go to reasonable lengths to avoid using GoTo statements for anything other than error handling. They are the root of a lot of problems as execution order is concerned."),(0,a.kt)("h3",{id:"error-handling"},"Error Handling"),(0,a.kt)("p",null,"One final control structure that exists is related to error handling. It is an inevitable consequence that computer programs will eventually throw errors. There are a lot of techniques and good practice that can avoid errors, but sometimes you will be forced to deal with an error. The alternative to error handling is usually a pop up that informs the user that something went wrong. For an experienced user, they may be able to handle the ",(0,a.kt)("inlineCode",{parentName:"p"},"Debug")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Continue")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"End")," decision, but your typical user will assume that your code has failed catastrophically. It's entirely possible that the error has no effect on your intended outcome, or that the error could be resolved if the user just hit ",(0,a.kt)("inlineCode",{parentName:"p"},"Continue")," but the take home message is that ",(0,a.kt)("em",{parentName:"p"},"if")," something ",(0,a.kt)("em",{parentName:"p"},"has")," to happen to respond to an error (or a possibly error), then you need error handling."),(0,a.kt)("p",null,"The elements of error handling are simple:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Determine when to allow an error to be thrown"),(0,a.kt)("li",{parentName:"ul"},"Determine what happens with execution when an error occurs"),(0,a.kt)("li",{parentName:"ul"},"Determine where to go back to once the error state has been addressed")),(0,a.kt)("p",null,'The first decision to make is whether or not to allow errors to interrupt execution. By default, the answer here is "yes", an error will interrupt execution. If you want to handle this differently or reset it back to default, there are a pair of commands that can be used:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"On Error Resume Next"),", ignore all future errors, just keep trucking"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"On Error Goto 0"),", stop execution immediately at the next error")),(0,a.kt)("p",null,'If you are savvy about searching online for solutions to your problem, you will often see option 1 listed as the "go to" (or is it ',(0,a.kt)("inlineCode",{parentName:"p"},"GoTo"),", ha!) solution for getting around an error. In the technical sense, yes, ",(0,a.kt)("inlineCode",{parentName:"p"},"On Error Resume Next")," will absolutely get you around an error. It will by definition ignore the error and just keep going with execution. For the vast majority of workflows, this is an awful approach. Very often an error is indicating that something has gone awry from your expectations. If those expectations were reasonable, then it is very likely that future code will not work as intended. Therefore,e if you are getting an error, you should give serious consideration to finding the source of it before you ",(0,a.kt)("inlineCode",{parentName:"p"},"Resume Next")," through it. Ignoring an error that should have been addressed nearly always causes more pain later."),(0,a.kt)("p",null,"THe other harsh approach to respond to an error is to force execution to stop immediately. This prompts the user with the popup about how to proceed. This prompt is helpful because it gives two options that may allow you to solve the problem. THe first is ",(0,a.kt)("inlineCode",{parentName:"p"},"Continue")," which will attempt to run the line of code again that cause the issue. If the error still persists, then you will simply get it again. No harm. However, it is also possible to change the state of Excel while the prompt is visible. T his means that if your code was relying on an ",(0,a.kt)("inlineCode",{parentName:"p"},"ActiveChart")," and you did not select one; you will be able to select a chart before hitting ",(0,a.kt)("inlineCode",{parentName:"p"},"Continue"),". This can be a quick way out of a problem if you are confident where the error occurred. If you are programming only for yourself, this can also be a clean way around dealing with waiting for user input using another ",(0,a.kt)("inlineCode",{parentName:"p"},"GoTo")," approach down below. Having said that, allowing a user to deal with an error prompt is absolutely awful in terms of usability."),(0,a.kt)("p",null,"The second way you can deal with these error prompts is by hitting ",(0,a.kt)("inlineCode",{parentName:"p"},"Debug"),". This is likely the first response when an error occurs because you are very unlikely to know where the exact error occurs. Once you've seen it however, then you may be able to contue above. THe nice thing about debugging the error is that you get some powerful tools to try and solve the problem. For a full overview of debugging, check out the other section (TODO: add link). The specific features that are nice for dealing with error sinclude:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Locals window, which will provide an overview of all the local variables and their current state"),(0,a.kt)("li",{parentName:"ul"},"Set next statement, which will allow you to skip over an error or rerun a line of code whose state may have changed between executions"),(0,a.kt)("li",{parentName:"ul"},"Immediate window, which will allow you to either run arbitrary commands or possibly output information about the program state.")),(0,a.kt)("p",null,"All of those tools combined should make it possible for you to determine the source of an error. Once you have determine the source of an error, you can then set about resolving the error, again using the debug tools. Once you have solved the problem, you should give serious consideration to then adding that solution to the code using proper error handling techniques. Again, it is absolutely awful to present the user with an error dialog and expect them to be able to figure it out. Even if you are the user, you will absolutely tire of dealing with error prompts that can be handled with proper handling."),(0,a.kt)("p",null,"If you want to address an error, there are a couple of ways to handle that. They all rely on using the ",(0,a.kt)("inlineCode",{parentName:"p"},"On Error Goto LABEL")," technique. This allows the code execution to jump to a specific place in your code. That area in your code is then able to do a couple of helpful things:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Query the state of the ",(0,a.kt)("inlineCode",{parentName:"li"},"Err")," object"),(0,a.kt)("li",{parentName:"ul"},"Attempt to address the error and then kick code back to the previous spot"),(0,a.kt)("li",{parentName:"ul"},"Provide the user with proper feedback before killing execution"),(0,a.kt)("li",{parentName:"ul"},"Log the issue accordingly before failing or prompting the user")),(0,a.kt)("p",null,"With all of these approaches, the idea is simple: redirect execution to a known spot when the error has occurred. Once you are in a known spot, you can then step through possible problems and possible solutions. If you want, you are then able to send execution back to another spot to advance. IF you cannot resolve the error (or determine what caused it), you can then end execution all the same. Ideally you end execution with a better message than the normal prompt."),(0,a.kt)("p",null,"TODO: give an example of some error handling code"),(0,a.kt)("h4",{id:"avoiding-errors"},"avoiding errors"),(0,a.kt)("p",null,"Although this section is about error handling, the best error handling is an approach hta tmake is very difficult for an error to occur in the first place. As you call into specific VBA and Excel Subs, you will gain a feel for which ones can cause problems. On the VBA side, there are a number of specific calls that will lead to errors:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Indexing into an array with a index that is not valid: ",(0,a.kt)("inlineCode",{parentName:"li"},'Sheets("SomeSheetThatIsMissing")')),(0,a.kt)("li",{parentName:"ul"},"Attempting to use a property on an object that does not exist"),(0,a.kt)("li",{parentName:"ul"},"Sending invalid parameters to a function")),(0,a.kt)("p",null,"All of those items above have the nice poprerty that you may be able to provide checks for when you will enter an error state. The upside of this approach is that you can use an ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Then")," statement to check for an error causing state and then step around it. Before using ",(0,a.kt)("inlineCode",{parentName:"p"},"Range.Value"),", you can check that ",(0,a.kt)("inlineCode",{parentName:"p"},"If Not Range Is Nothing"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"Nothing")," is the default value for a reference type before it has been set to a poper reference. You are always going to get an error if you attempt to use a ",(0,a.kt)("inlineCode",{parentName:"p"},"Nothing"),". You can avoid a ton of errors being thrown by simply checking for Nothing and avoiding its use when it appears."),(0,a.kt)("p",null,"For a lot of arrays and other utterable objects, you have different approaches for checking inf something is a valid index before accessing it. For a ",(0,a.kt)("inlineCode",{parentName:"p"},"Dictionary"),", there is the ",(0,a.kt)("inlineCode",{parentName:"p"},"Exists")," method. For ",(0,a.kt)("inlineCode",{parentName:"p"},"Worksheets")," and other Excel arrays, you are always able to iterate through all of the items to check for existing before then using the index. TODO: add example of iterating sheets. It is very rare for the performances of VBA to be affected by these types of checks. There ar instances where it is not appropriate, but in general, these techniques work fine."),(0,a.kt)("h4",{id:"applicationxxx-functions"},"Application.XXX functions"),(0,a.kt)("p",null,"In some instances, it is possible to trade a runtime error for a return value that has a type of error. This occurs with the Application.XXX functions where XXX includes items in the list:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Match"),(0,a.kt)("li",{parentName:"ul"},"TODO: any others?")),(0,a.kt)("p",null,"This can be beneficial because when the function returns an error, you can then turn around and deal with it by checking ",(0,a.kt)("inlineCode",{parentName:"p"},"IsError"),". If the function throws an error instead, you are forced to use proper error handling to catch the error and attempt to resume state."),(0,a.kt)("h4",{id:"common-vba-errors"},"common VBA errors"),(0,a.kt)("p",null,"TODO: add section about 1004"),(0,a.kt)("p",null,"TODO: add information about compile time errors vs. run time errors."),(0,a.kt)("h4",{id:"common-excel-errors"},"common Excel errors"),(0,a.kt)("p",null,"In addition to the VBA errors, there are also a number of Excel specific errors that happen often enough that they should by addressed. Some of those common examples include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Using ",(0,a.kt)("inlineCode",{parentName:"li"},"ActiveXXX")," without have ",(0,a.kt)("inlineCode",{parentName:"li"},"XXX")," selected. This is most common with ",(0,a.kt)("inlineCode",{parentName:"li"},"ActiveChart")," where it is possible to not have a Chart selected. This is not possibly with ActiveWorkbook or ActiveSheet since one will always be active. TODO: what about ActiveCEll?"),(0,a.kt)("li",{parentName:"ul"},"Using ",(0,a.kt)("inlineCode",{parentName:"li"},"Selection"),' when the "wrong" thing is selected. It is quite common to ',(0,a.kt)("inlineCode",{parentName:"li"},"Set")," some vriable equal to Selection. If the wrong thing is selected, you will get an error about ",(0,a.kt)("inlineCode",{parentName:"li"},"Type Mismatch")),(0,a.kt)("li",{parentName:"ul"},"Attempting to make a selection when it is not valid per the UI. This is most often the case when you attempt to Select a cell when its Parent Worksheet is not selected."),(0,a.kt)("li",{parentName:"ul"},"Attempting to build a Range across Worksheets using ",(0,a.kt)("inlineCode",{parentName:"li"},"Union")),(0,a.kt)("li",{parentName:"ul"},"Attempting to iterate through a Range of cells by checking ",(0,a.kt)("inlineCode",{parentName:"li"},"Range.Value")," if the Range can contain errors. If this is possibl you will instead have to check for errors first."),(0,a.kt)("li",{parentName:"ul"},"Attempting to access or change the ",(0,a.kt)("inlineCode",{parentName:"li"},"AutoFilter")," if is has not been enabled first")),(0,a.kt)("p",null,"There are also a ton of instances where some function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Nothing")," and you do not check for it. T his most commonly occurs with:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Range.Find")," where nothing was found"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Intersect")," where the two Ranges do not overlap"),(0,a.kt)("li",{parentName:"ul"},"TODO: add some others?")),(0,a.kt)("p",null,"As a final note, it is owrht mentioning that the sign of a good programmer is one who has a feel for when errors can and cannot occur. You will begin to appreciate when it is needed to add error handling code versus when you know you will not need it. Too often as a beginner, you will be excluding error handling because you are unaware of what can go wrong. As you get better, you will start to exclude error handling because you actually know that no errors can occur. Until you get good, the result may look the same (no error handling code) but the result to the user is prompts and halted execution in one case."))}p.isMDXComponent=!0}}]);